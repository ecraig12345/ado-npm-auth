import fs from "fs";
import { EOL } from "os";
import { generateNpmrcPat } from "./generate-npmrc-pat.js";
import { NpmrcOrg, getRepoNpmrcAdoOrganizations } from "./get-repo-npmrc-ado-orgs.js";
import { getUserNPMRC, readNpmRC } from "./npmrc.js";
import { getFeedWithoutProtocol } from "../utils/get-feed-without-protocol.js";

// /**
//  * URL for the user's PAT settings
//  * @param { string } organization
//  */
// const getTokenUrl = (organization: string) =>
//   `https://dev.azure.com/${organization}/_usersSettings/tokens`;

/**
 * Default user to be used in the .npmrc
 */
const defaultUser = "me";

/**
 * Default email to be used in the .npmrc
 */
const defaultEmail = "me@example.com";

/**
 * Create a base64 encoded string from a string
 */
const base64 = (input: string) => {
  return Buffer.from(input).toString("base64");
};

/**
 * Add a PAT for the given feed URL, or update if an entry already exists.
 */
const addToken = ({
  feedUrl,
  pat,
  newUserNpmRc,
}: {
  feedUrl: string;
  pat: string | undefined;
  newUserNpmRc: string;
}): string => {
  let isAlreadyInNpmrc = newUserNpmRc.includes(feedUrl);
  if (isAlreadyInNpmrc) {
    newUserNpmRc = newUserNpmRc.replace(
      new RegExp(`${feedUrl}:_password\=(.*)`),
      `${feedUrl}:_password=${pat}`,
    );
  } else {
    const entry = [
      `${feedUrl}:username=${defaultUser}`,
      `${feedUrl}:email=${defaultEmail}`,
      `${feedUrl}:_password=${pat}`,
      "",
    ].join(EOL);

    newUserNpmRc += entry + EOL;
  }

  return newUserNpmRc;
};

/**
 * Create the user npmrc given an array of registry urls and a token
 */
const createUserNpmrc = ({ feeds, existingNpmrc }: {
  feeds: Array<NpmrcOrg>;
  existingNpmrc: string;
}): string => {
  let newUserNpmRc = existingNpmrc;

  if (!newUserNpmRc.includes("Azure Artifacts Auth")) {
    // Add this comment after any user content
    newUserNpmRc = `${newUserNpmRc}${EOL}# Generated by Azure Artifacts Auth${EOL}`;
  }

  for (const feed of feeds) {
    const feedWithoutProtocol = "//" + getFeedWithoutProtocol(feed.feed);
    newUserNpmRc = addToken({
      feedUrl: feedWithoutProtocol,
      pat: feed.pat,
      newUserNpmRc,
    });

    // If the feed ends with a "registry" segment, add an entry without that segment.
    // (This is required by some feeds/repos, for unclear reasons.)
    const feedWithoutRegistry = feedWithoutProtocol.replace(/\/registry\/?$/, "/");
    if (feedWithoutRegistry !== feedWithoutProtocol) {
      newUserNpmRc = addToken({
        feedUrl: feedWithoutRegistry,
        pat: feed.pat,
        newUserNpmRc,
      });
    }
  }

  return newUserNpmRc;
};

const userNpmrc = getUserNPMRC();

export const setupNpmrc = async ({
  organizationPatMap = {},
  feeds,
}: {
  /** Map of ADO Organization to packaging PAT for that org */
  organizationPatMap: Record<string, string>;
  feeds: NpmrcOrg[];
}): Promise<void> => {
  for (const feed of feeds) {
    try {
      let pat = organizationPatMap[feed.organization];

      if (!pat) {
        throw new Error(`No PAT found for ${feed.organization}`);
      }

      const b64Pat = base64(pat);
      feed.pat = b64Pat;

    } catch (e) {
      throw new Error(
        `Error setting up npmrc for ${feed.organization} organization: ${(e as any).message}`
      );
    }
  }

  let userNpmrcFile = "";
  try {
    userNpmrcFile = await readNpmRC({ npmrc: userNpmrc });
  } catch (e) {
    /* No user .npmrc file, that's ok */
  }
  const newnpmrc = createUserNpmrc({
    existingNpmrc: userNpmrcFile,
    feeds,
  });

  await fs.promises.writeFile(userNpmrc, newnpmrc);
};

export const setNpmrcPat = async (): Promise<void> => {
  const adoOrgs = await getRepoNpmrcAdoOrganizations();

  // get a token for each feed
  const organizationPatMap: Record<string, string> = {};
  for (const adoOrg of adoOrgs) {
    organizationPatMap[adoOrg.organization] = await generateNpmrcPat(
      adoOrg.organization,
      false
    );
  }

  await setupNpmrc({
    organizationPatMap,
    feeds: adoOrgs
  });
};
